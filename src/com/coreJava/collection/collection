											COLLECTION FRAMEWORK
-> storing similar kind of object as unit is known as collection.

	ITERABLE
	   -> COLLECTION
			-> LIST(I)
				-> insertion order follows
				-> multiple null allowed
				-> duplicate allowed
			-> SET(I)
				-> insertion order not follows
				-> only one null allowed
				-> duplicate not allowed		
				
				
	LIST(I)
	  1.ArrayList
	  	 -> index based
	  	 -> duplicate allowed	
	     -> multiple null allowed
	     -> expensive thats why not good for insertion in the middle bcz all other elements move to right
	     -> good for accessing/reading elements from index.(good for random read/access).T/C:- O(1)
	     -> Not good for adding/deleting elements in the middle of the list.(Elements are getting shifted to maintain continuous memory location).T/C:- O(n)
	     -> in case of insertion at the last index(at the end of list).T/C:- O(1)
	     
	  2.LinkedList		
	     -> node based
	     -> duplicate allowed	
	     -> multiple null allowed
	     -> insertion/deletion in the middle T/C :- O(1) but iteration/to reach there is O(n) + after reaching the node deletion/insertion O(1) => O(n)
	     -> random access/reading T/C:- O(n)

-> every object have hashCode that are integers(+ve & -ve);











	     
	     
*NOTE:- In Eclipse, the keyboard shortcut "Ctrl + Shift + O" is used to Organize Imports in the current Java source file.
Q.can you override the equals() method? yes
									