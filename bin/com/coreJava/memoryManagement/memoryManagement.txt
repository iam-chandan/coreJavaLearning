-> class always load into meta space
-> heap area grow dynamically based on the need (min :-3gb to max:-5gb)
-> static goes to meta space
-> class metadata and method metadata goes to meta space
-> local variable goes to stack
-> object store in heap and there reference store in stack
-> Garbage collector present in heap
-> heap is devided into 2 types
	1. young gen
		1. eden
			-> when ever object create that object store in eden
		2.S0 (S :- s stands survivor)
			-> once minore GC removed the nullified objects from from eden then rest objects which are present in eden will transfer
			   to S0
		3.S1
			-> same like above after nullified objects removed then rest objects will transfer to S1
	2. old gen(perm-gen)
		-> from S1 nullified objects removed then transfer to old gen
-> GC also 2 types
	1. minor GC
		-> it runs on young gen
	2. major GC
		-> it runs on old gen
-> when object is nullified then minor gc will activate and remove the unwanted/unreachable objects then what ever object
   left that will transfer to S0 same process will repeat again once what ever left that object will again transfer to S1
   same after removing the unreachable object removed then rest objects will transfer to old gen.
-> old gen have large space
Q.how to manage memory leak in java?
  A:-> after completion of objects work nullify the object